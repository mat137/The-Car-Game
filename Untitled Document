console.log("say hello");

var carPic = document.createElement("img");
var carPicLoaded = false;

var canvas, canvasContext;

var carX = 75;
var carY = 75;
var carSpeed = 0;
var carAng = 0;

const GROUNDSPEED_DECAY_MULT = 0.94;
const DRIVE_POWER = 0.5;
const REVERSE_POWER = 0.2;
const TURN_RATE = 0.03;

const TRACK_W = 40;
const TRACK_H = 40;
const TRACK_GAP = 2;
const TRACK_COLS = 20;
const TRACK_ROWS = 15;

/*
0 - road,
1 - walls(collision),
2 - starting point(replaced with road after start)
*/
var trackGrid = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
                 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1,
                 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
                 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1,
                 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
                 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
                 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
                 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
                 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,
                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

const TRACK_ROAD = 0;
const TRACK_WALL = 1;
const TRACK_PLAYERSTART = 2;

const KEY_LEFT_ARROW = 37;
const KEY_UP_ARROW = 38;
const KEY_RIGHT_ARROW = 39;
const KEY_DOWN_ARROW = 40;

var keyHeld_Gas = false;
var keyHeld_Reverse = false;
var keyHeld_TurnLeft = false;
var keyHeld_TurnRight = false;

var mouseX;
var mouseY;


function updateMousePos(evt){
  var rect = canvas.getBoundingClientRect();
  var root = document.documentElement;

  mouseX = evt.clientX - rect.left - root.scrollLeft;
  mouseY = evt.clientY - rect.top - root.scrollTop;


  // cheat / hack to test car in any position
  /*
  carX = mouseX;
  carY = mouseY;
  carSpeedX = 4;
  carSpeedY = -4; */
}

// steering on
function keyPressed(evt){
  // console.log("Key pressed: " + evt.keyCode);
  if(evt.keyCode == KEY_LEFT_ARROW){    //turn left
    keyHeld_TurnLeft = true;
  }
  if(evt.keyCode == KEY_RIGHT_ARROW){  //turn right
    keyHeld_TurnRight = true;
  }
  if(evt.keyCode == KEY_UP_ARROW){    // acceleration
    keyHeld_Gas = true;
  }
  if(evt.keyCode == KEY_DOWN_ARROW){  //braking
    keyHeld_Reverse = true;
  }

  evt.preventDefault(); //prevents arrows from scrolling page
}

//steering on release
function keyReleased(evt){
  // console.log("Key released: " + evt.keyCode);
  if(evt.keyCode == KEY_LEFT_ARROW){    //turn left
    keyHeld_TurnLeft = false;
  }
  if(evt.keyCode == KEY_RIGHT_ARROW){  //turn right
    keyHeld_TurnRight = false;
  }
  if(evt.keyCode == KEY_UP_ARROW){    // acceleration
    keyHeld_Gas = false;
  }
  if(evt.keyCode == KEY_DOWN_ARROW){  //braking
    keyHeld_Reverse = false;
  }
}

window.onload = function() {

  canvas = document.getElementById('gameCanvas');
  canvasContext = canvas.getContext('2d');

  var framesPerSecond = 30;
  setInterval(updateAll, 1000/framesPerSecond);

  canvas.addEventListener('mousemove', updateMousePos);

  document.addEventListener('keydown', keyPressed);
  document.addEventListener('keyup', keyReleased);

  carPic.onload = function(){
    carPicLoaded = true;
  }
  carPic.src = "player1car.png"

  carReset();
}

  function updateAll(){
    moveAll();
    drawAll();
  }

  function carReset() {
    for(eachRow=0; eachRow<TRACK_ROWS; eachRow++){
      for(var eachCol=0; eachCol<TRACK_COLS; eachCol++){
        var arraIndex = rowColToArrayIndex(eachCol, eachRow);
        if(trackGrid[arraIndex] == TRACK_PLAYERSTART){
          trackGrid[arraIndex] = TRACK_ROAD;
          carAng= -Math.PI/2;
          carX = eachCol * TRACK_W + TRACK_W/2;
          carY = eachRow * TRACK_H + TRACK_H/2;
        }
      }
    }
  }

  function carMove(){

    carSpeed *= GROUNDSPEED_DECAY_MULT; //slow down on not accelerating

    if(keyHeld_Gas){
      carSpeed += DRIVE_POWER;
    }
    if(keyHeld_Reverse){
      carSpeed -= REVERSE_POWER;
    }
    if(keyHeld_TurnLeft){
      carAng -= TURN_RATE;
    }
    if(keyHeld_TurnRight){
      carAng += TURN_RATE;
    }

    carX += Math.cos(carAng) * carSpeed;
    carY += Math.sin(carAng) * carSpeed;

  }

  //checking if there is a wall in a way
  function isWallAtColRow(col,row){
    if(col >= 0 && col < TRACK_COLS &&
      row >= 0 && row < TRACK_ROWS){
        var trackIndexUnderCoord = rowColToArrayIndex(col,row);
        return (trackGrid[trackIndexUnderCoord] == TRACK_WALL); //return true if there is coll
      }else {
        return false;
      }
  }

  function carTrackHandling(){
    var carTrackCol = Math.floor(carX / TRACK_W);
    var carTrackRow = Math.floor(carY / TRACK_H);
    var trackIndexUnderCar = rowColToArrayIndex(carTrackCol,carTrackRow)

    if(carTrackCol >= 0 && carTrackCol < TRACK_COLS &&
      carTrackRow >= 0 && carTrackRow < TRACK_ROWS){

      if(isWallAtColRow(carTrackCol, carTrackRow)){
        //to ensure car wont burrow into wall
        carX -= Math.cos(carAng) * carSpeed;
        carY -= Math.sin(carAng) * carSpeed;

        carSpeed *= -0.5;
      }//end of track found
    }//end of valid col an row
  }//end of carTrackHandling func


  function moveAll(){
    carMove();
    carTrackHandling();
  }

  function colorCircle(centerX, centerY, radiance, fillColor){
    canvasContext.fillStyle = fillColor;
    canvasContext.beginPath();
    canvasContext.arc(centerX, centerY, radiance, 0, Math.PI*2, true);
    canvasContext.fill();
  }

  function drawAll(){
    colorRect(0,0, canvas.width, canvas.height, 'black');

    // colorCircle(carX,carY, 10 , 'red');
    if(carPicLoaded){
      drawBitmapCenteredWithRotation(carPic, carX, carY, carAng)
    }

    drawTracks();
  }

    function drawBitmapCenteredWithRotation(useBitmap, atX, atY, withAng){
      canvasContext.save();
      canvasContext.translate(atX,atY);
      canvasContext.rotate(withAng);
      canvasContext.drawImage(useBitmap, -useBitmap.width/2, -useBitmap.height/2);
      canvasContext.restore();
    }

  function colorRect(topRightX, topRightY, boxWidth, boxHeight, fillColor){
    canvasContext.fillStyle = fillColor;
    canvasContext.fillRect(topRightX, topRightY, boxWidth, boxHeight)
  }

  function rowColToArrayIndex(col, row){
    return col + TRACK_COLS * row;
  }

  function drawTracks(){

    for(eachRow=0; eachRow<TRACK_ROWS; eachRow++){
      for(var eachCol=0; eachCol<TRACK_COLS; eachCol++){

        var arraIndex = rowColToArrayIndex(eachCol, eachRow);

        if(trackGrid[arraIndex] == TRACK_WALL){
          colorRect(TRACK_W * eachCol ,TRACK_H * eachRow, TRACK_W - TRACK_GAP, TRACK_H - TRACK_GAP, 'blue');
        }//end of is this track here
      }//end of for each track
    }//end of for each row

  }// end of drawTracks func

  // function colorText(showWords, textX, textY, fillColor){
  //   canvasContext.fillStyle = fillColor;
  //   canvasContext.fillText(showWords, textX, textY);
  // }
















////

